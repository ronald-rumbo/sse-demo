{"ast":null,"code":"import{useEffect,useRef,useState}from'react';export const useSSE=url=>{const[tasks,setTasks]=useState([]);const[isConnected,setIsConnected]=useState(false);const[error,setError]=useState(null);const eventSourceRef=useRef(null);useEffect(()=>{const connectSSE=()=>{try{setError(null);const eventSource=new EventSource(url);eventSourceRef.current=eventSource;eventSource.onopen=()=>{setIsConnected(true);setError(null);};eventSource.onmessage=event=>{try{const data=JSON.parse(event.data);if(data.type==='tasks_updated'&&data.tasks){setTasks(data.tasks);}}catch(err){console.error('Failed to parse SSE message:',err);}};eventSource.onerror=()=>{setIsConnected(false);setError('Connection lost. Attempting to reconnect...');setTimeout(()=>{var _eventSourceRef$curre;if(((_eventSourceRef$curre=eventSourceRef.current)===null||_eventSourceRef$curre===void 0?void 0:_eventSourceRef$curre.readyState)===EventSource.CLOSED){connectSSE();}},3000);};}catch(err){setError('Failed to establish connection');setIsConnected(false);}};connectSSE();return()=>{if(eventSourceRef.current){eventSourceRef.current.close();eventSourceRef.current=null;}};},[url]);return{tasks,isConnected,error};};","map":{"version":3,"names":["useEffect","useRef","useState","useSSE","url","tasks","setTasks","isConnected","setIsConnected","error","setError","eventSourceRef","connectSSE","eventSource","EventSource","current","onopen","onmessage","event","data","JSON","parse","type","err","console","onerror","setTimeout","_eventSourceRef$curre","readyState","CLOSED","close"],"sources":["/Users/ron/Downloads/tmp/astay/demo-sse-net/frontend/src/hooks/useSSE.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport { Task } from '../types/Task';\n\ninterface SSEMessage {\n  type: string;\n  tasks?: Task[];\n}\n\nexport const useSSE = (url: string) => {\n  const [tasks, setTasks] = useState<Task[]>([]);\n  const [isConnected, setIsConnected] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const eventSourceRef = useRef<EventSource | null>(null);\n\n  useEffect(() => {\n    const connectSSE = () => {\n      try {\n        setError(null);\n        const eventSource = new EventSource(url);\n        eventSourceRef.current = eventSource;\n\n        eventSource.onopen = () => {\n          setIsConnected(true);\n          setError(null);\n        };\n\n        eventSource.onmessage = (event) => {\n          try {\n            const data: SSEMessage = JSON.parse(event.data);\n\n            if (data.type === 'tasks_updated' && data.tasks) {\n              setTasks(data.tasks);\n            }\n          } catch (err) {\n            console.error('Failed to parse SSE message:', err);\n          }\n        };\n\n        eventSource.onerror = () => {\n          setIsConnected(false);\n          setError('Connection lost. Attempting to reconnect...');\n\n          setTimeout(() => {\n            if (eventSourceRef.current?.readyState === EventSource.CLOSED) {\n              connectSSE();\n            }\n          }, 3000);\n        };\n\n      } catch (err) {\n        setError('Failed to establish connection');\n        setIsConnected(false);\n      }\n    };\n\n    connectSSE();\n\n    return () => {\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n        eventSourceRef.current = null;\n      }\n    };\n  }, [url]);\n\n  return { tasks, isConnected, error };\n};"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CAQnD,MAAO,MAAM,CAAAC,MAAM,CAAIC,GAAW,EAAK,CACrC,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGJ,QAAQ,CAAS,EAAE,CAAC,CAC9C,KAAM,CAACK,WAAW,CAAEC,cAAc,CAAC,CAAGN,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACO,KAAK,CAAEC,QAAQ,CAAC,CAAGR,QAAQ,CAAgB,IAAI,CAAC,CACvD,KAAM,CAAAS,cAAc,CAAGV,MAAM,CAAqB,IAAI,CAAC,CAEvDD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAY,UAAU,CAAGA,CAAA,GAAM,CACvB,GAAI,CACFF,QAAQ,CAAC,IAAI,CAAC,CACd,KAAM,CAAAG,WAAW,CAAG,GAAI,CAAAC,WAAW,CAACV,GAAG,CAAC,CACxCO,cAAc,CAACI,OAAO,CAAGF,WAAW,CAEpCA,WAAW,CAACG,MAAM,CAAG,IAAM,CACzBR,cAAc,CAAC,IAAI,CAAC,CACpBE,QAAQ,CAAC,IAAI,CAAC,CAChB,CAAC,CAEDG,WAAW,CAACI,SAAS,CAAIC,KAAK,EAAK,CACjC,GAAI,CACF,KAAM,CAAAC,IAAgB,CAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC,CAE/C,GAAIA,IAAI,CAACG,IAAI,GAAK,eAAe,EAAIH,IAAI,CAACd,KAAK,CAAE,CAC/CC,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC,CACtB,CACF,CAAE,MAAOkB,GAAG,CAAE,CACZC,OAAO,CAACf,KAAK,CAAC,8BAA8B,CAAEc,GAAG,CAAC,CACpD,CACF,CAAC,CAEDV,WAAW,CAACY,OAAO,CAAG,IAAM,CAC1BjB,cAAc,CAAC,KAAK,CAAC,CACrBE,QAAQ,CAAC,6CAA6C,CAAC,CAEvDgB,UAAU,CAAC,IAAM,KAAAC,qBAAA,CACf,GAAI,EAAAA,qBAAA,CAAAhB,cAAc,CAACI,OAAO,UAAAY,qBAAA,iBAAtBA,qBAAA,CAAwBC,UAAU,IAAKd,WAAW,CAACe,MAAM,CAAE,CAC7DjB,UAAU,CAAC,CAAC,CACd,CACF,CAAC,CAAE,IAAI,CAAC,CACV,CAAC,CAEH,CAAE,MAAOW,GAAG,CAAE,CACZb,QAAQ,CAAC,gCAAgC,CAAC,CAC1CF,cAAc,CAAC,KAAK,CAAC,CACvB,CACF,CAAC,CAEDI,UAAU,CAAC,CAAC,CAEZ,MAAO,IAAM,CACX,GAAID,cAAc,CAACI,OAAO,CAAE,CAC1BJ,cAAc,CAACI,OAAO,CAACe,KAAK,CAAC,CAAC,CAC9BnB,cAAc,CAACI,OAAO,CAAG,IAAI,CAC/B,CACF,CAAC,CACH,CAAC,CAAE,CAACX,GAAG,CAAC,CAAC,CAET,MAAO,CAAEC,KAAK,CAAEE,WAAW,CAAEE,KAAM,CAAC,CACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}